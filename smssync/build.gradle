/*
 * Copyright (c) 2010 - 2015 Ushahidi Inc
 * All rights reserved
 * Contact: team@ushahidi.com
 * Website: http://www.ushahidi.com
 * GNU Lesser General Public License Usage
 * This file may be used under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.LGPL included in the
 * packaging of this file. Please review the following information to
 * ensure the GNU Lesser General Public License version 3 requirements
 * will be met: http://www.gnu.org/licenses/lgpl.html.
 *
 * If you have questions regarding the use of this file, please contact
 * Ushahidi developers at team@ushahidi.com.
 */

import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.grgit.Grgit

apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'com.github.triplet.play'

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def trackProperty() {
    return project.hasProperty('uploadTrack') ? uploadTrack : 'alpha'
}

def readWhatsNewFile(filename) {
    File file = new File('smssync/src/main/play/en-US/' + filename);
    return file.exists() ? file.text + '\n\n' :
            new File('smssync/src/main/play/en-US/whatsnew').text;
}

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    signingConfigs {
        releaseSign
    }

    buildTypes {
        release {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }

            minifyEnabled false
            shrinkResources false
            // Library specific proguard files
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-square-okio.pro'
            proguardFile 'proguard-square-okhttp.pro'
            proguardFile 'proguard-square-otto.pro'

            // Default proguard files
            proguardFile 'proguard-project.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.releaseSign
        }

        debug {
            if (project.hasProperty('googleAnalyticsCode')) {
                resValue "string", "ga_trackingId", "${googleAnalyticsCode}"
            } else {
                resValue "string", "ga_trackingId", ""
            }
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            debuggable true
        }
    }

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")

        def twitterConsumerKey = project.hasProperty('twitterConsumerKey') ? twitterConsumerKey :
                'consumer_key'
        def twitterConsumerSecret = project.hasProperty('twitterSecretKey') ? twitterSecretKey :
                'consumer_secret'
        if (!project.hasProperty('twitterConsumerKey')) {
            println 'Missing Twitter Consumer Key. Using a dummy key for now'
        }

        if (!project.hasProperty('twitterSecretKey')) {
            println 'Missing Twitter Secret Key. Using a dummy secret for now'
        }
        buildConfigField "String", "PUBLIC_LICENSE_KEY", '"' +  '"'
        buildConfigField "String", "TWITTER_CONSUMER_KEY", '"' + twitterConsumerKey + '"'
        buildConfigField "String", "TWITTER_CONSUMER_SECRET", '"' + twitterConsumerSecret + '"'

        testApplicationId "org.addhen.smssync.tests"
        applicationId "org.addhen.smssync"
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "version"
    productFlavors {
        noAnalytics {
            applicationId 'org.addhen.smssync'
        }
        internal {
            applicationId 'org.addhen.smssync.internal'
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "smssync-${variant.name}_v${defaultConfig.versionName}-" +
                    variant.buildType.name.toUpperCase() + ".apk"
        }
    }

    dexOptions {
        preDexLibraries = preDexEnabled
        //incremental = true; //default
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//retrolambda {
//    jvmArgs '-noverify'
//}

release {
    grgit = Grgit.open(dir: '.')
    def tagMessage = readWhatsNewFile("whatsnew-${trackProperty()}");
    versionStrategy Strategies.PRE_RELEASE_ALPHA_BETA
    android.defaultConfig.versionName = project.version.toString()
    tagStrategy {
        generateMessage = { version -> "\n\nRelease of $version.version\n$tagMessage" }
    }
}

if (project.hasProperty('releaseKeyStore') &&
        project.hasProperty('releaseKeyPassword') &&
        project.hasProperty('releaseKeyStorePassword') &&
        project.hasProperty('releaseKeyAlias')) {
    android.signingConfigs.releaseSign.keyAlias = releaseKeyAlias
    android.signingConfigs.releaseSign.storeFile = file(releaseKeyStore)
    android.signingConfigs.releaseSign.storePassword = releaseKeyStorePassword
    android.signingConfigs.releaseSign.keyPassword = releaseKeyPassword
} else {
    android.signingConfigs.releaseSign.keyAlias ""
    android.signingConfigs.releaseSign.storeFile null
    android.signingConfigs.releaseSign.storePassword ""
    android.signingConfigs.releaseSign.keyPassword ""
}

//tasks.release.dependsOn(['publishApkWithAnalyticsRelease'])

// Build and launch app from command line
task runApp(type: Exec, dependsOn: ['build', 'installWithAnalyticsDebug']) {
    //Linux command to launch the MainActivity when debug app is installed
    commandLine 'adb', 'shell', 'am', 'start', '-n',
            'org.addhen.smssync.debug/org.addhen.smssync.presentation.view.ui.activity.MainActivity'
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies
    annotationProcessor appDependencies.daggerCompiler // Needed for source code generation
    annotationProcessor appDependencies.butterKnifeComplier
    implementation appDependencies.raiburari
    implementation appDependencies.cupboard
    implementation appDependencies.butterKnife
    implementation appDependencies.wakeful
    implementation appDependencies.okHttp
    implementation appDependencies.twitter4jCore
    implementation appDependencies.nineOldAndroids
    implementation appDependencies.loggingInterceptor
    implementation appDependencies.bottomSheet
    implementation appDependencies.zXingQRCode
    implementation appDependencies.supportPreference
    implementation appDependencies.timber
    // Firebase(analytics, crash report)
    implementation appDependencies.firebaseCore
    implementation appDependencies.firebaseCrash
    compileOnly appDependencies.javaxAnnotation // Needed to resolve compilation errors

    // Test depedencies
    testImplementation appTestDependencies.junit
    testImplementation appTestDependencies.mockito
    testImplementation appTestDependencies.mockWebServer
    testAnnotationProcessor appDependencies.daggerCompiler

    androidTestImplementation appTestDependencies.mockito
    androidTestImplementation appTestDependencies.dexmaker
    androidTestImplementation appTestDependencies.dexmakerMockito
    androidTestAnnotationProcessor appDependencies.daggerCompiler
}


